// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

contract Shop_Management_System{
    // Define a struct to store information about the item
    struct Item {
        uint id;
        string name;
        uint price;
    }

    // Mapping to store all items
    mapping (uint => Item) public items;

    // Mapping to store sales information
    mapping (uint => uint) public sales;

    // Store the total revenue generated by the shop
    uint public revenue;

    // Store the owner of the shop
    address public owner;

    // Store the employee account
    address public employee;

    // Store the current time of the day
    uint public currentTime;

    // Constructor to set the owner and employee accounts
    constructor(address _owner, address _employee) {
        owner = _owner;
        employee = _employee;
    }

    // Function to add a new item to the shop
    function addItem(uint _id, string memory _name, uint _price) public {
        // Only the owner can add items
        require(msg.sender == owner, "Only the owner can add items");

        // Add the item to the mapping
        items[_id] = Item(_id, _name, _price);
    }

    // Function to log a sale when a customer buys an item
    function makeSale(uint _id) public {
        // Only the employee can make sales
        require(msg.sender == employee, "Only the employee can make sales");

        // Check if the item exists
        require(items[_id].id != 0, "Item does not exist");

        // Update the sales information and revenue
        sales[_id]++;
        revenue += items[_id].price;
    }

    // Function for the owner to withdraw the revenue generated by the shop
    function withdrawRevenue() public {
        // Check the current time of the day
        require(currentTime >= 9 && currentTime <= 17, "Can only withdraw revenue during business hours");

        // Only the owner can withdraw the revenue
        require(msg.sender == owner, "Only the owner can withdraw revenue");

        // Send the revenue to the owner
        payable(msg.sender).transfer(revenue);

        // Reset the revenue to 0
        revenue = 0;
    }

    // Function to retrieve the number of sales of a specific item
    function getItemSales(uint _id) public view returns (uint) {
        // Return the number of sales of the item
        return sales[_id];
    }

    // Function to retrieve the total revenue generated by the shop
    function getTotalRevenue() public view returns (uint) {
        // Return the total revenue generated by the shop
        return revenue;
    }
}
